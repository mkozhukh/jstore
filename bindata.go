// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// store/dataitem.go
// store/store.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _storeDataitemGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2e\xc9\x2f\x4a\xe5\xe2\x2a\xa9\x2c\x48\x55\x70\x49\x2c\x49\xf4\x2c\x49\xcd\x55\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xe6\xe2\xf4\x74\x01\x71\x32\xf3\xd2\xb9\x6a\xb9\x00\x01\x00\x00\xff\xff\x69\x7e\x42\x24\x33\x00\x00\x00")

func storeDataitemGoBytes() ([]byte, error) {
	return bindataRead(
		_storeDataitemGo,
		"store/dataitem.go",
	)
}

func storeDataitemGo() (*asset, error) {
	bytes, err := storeDataitemGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/dataitem.go", size: 51, mode: os.FileMode(420), modTime: time.Unix(1550484655, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _storeStoreGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4f\x6b\xe3\x3a\x10\x3f\x4b\x9f\x62\xea\x43\x91\xfb\x52\xa7\x85\xf2\x0e\x81\x1c\x1e\xaf\xdb\xa5\x87\xed\xc2\x76\x97\x3d\x84\xb0\x28\xf6\x24\x55\x22\x5b\x46\x56\xda\x94\x92\xef\xbe\x8c\x24\xc7\x36\x9b\x94\xed\x25\x04\x8d\xf4\xfb\x37\xe3\xa9\x65\xbe\x91\x2b\x84\xc6\x19\x8b\x9c\xab\xb2\x36\xd6\x81\xe0\x2c\xc1\x2a\x37\x85\xaa\x56\xe3\x75\x63\xaa\x84\xb3\x44\x99\xb1\x32\x5b\xa7\x74\xc2\x39\x4b\x56\xca\x3d\x6d\x17\x59\x6e\xca\xb1\x6d\xc6\x3b\x55\x24\x3c\xe5\x7c\xb9\xad\x72\x78\xc0\x97\xff\x8d\xd6\x98\x3b\x65\x2a\x51\x4b\xf7\x04\x8d\xb3\xaa\x5a\xa5\x20\x2e\xba\xca\x08\xd0\x5a\x63\x53\x78\xe3\xac\x90\x4e\xc2\x64\x0a\x5d\xf5\x8d\xde\x4d\x80\x7e\xf7\x9c\xa1\xb5\x54\xa6\x6b\x99\x36\xb2\xb8\xb3\xa6\xbc\x53\x1a\x45\xca\x39\xb3\xe8\xb6\xb6\x82\x73\xaa\x7a\x50\xbe\xe7\xdc\xbd\xd6\xd8\x83\x23\x05\xdb\xdc\x11\x97\x17\x14\x15\x71\x56\x6f\xb5\x06\x28\x65\x3d\x0b\x27\xf3\x8b\x5b\xe9\xe4\xbd\xc3\x92\x33\x63\x0b\xb4\x30\x9b\x1f\x4e\xf6\xd1\xa1\xc8\xa1\x67\x24\x85\xcf\xe8\x84\x2a\x0e\x2e\x0f\x10\x44\xa7\x1c\x96\x23\x30\x1b\xd2\x9f\x67\x44\x37\x53\xc5\x9c\x33\xb5\x84\x33\xb3\xa1\x1b\x07\x03\xed\xb3\xb7\x3d\x67\xfb\xce\x98\x7a\x8f\xfa\xd3\x4e\x35\xae\xe9\xb3\x2f\x8c\xd1\x04\xfb\xeb\x18\x6b\x84\x34\x9b\xf7\xbc\xfc\xa7\xb5\x48\x7b\xbe\x09\x2d\x3e\xcc\x33\x1f\xca\xc9\xd7\x8f\xf2\x19\x85\x59\xac\xbb\x0c\xd2\xd0\x66\x1f\x45\x55\xe0\x8e\x14\x5d\x5e\x7b\xff\x66\xb1\xce\xee\x6f\x61\x3a\x85\x24\xf1\x41\xb4\x07\xb0\x53\x45\xf6\x80\x2f\x22\xcd\x1e\xbd\x2b\x91\x72\xb6\x07\xd4\x0d\xfa\x7b\x01\x88\x9c\xf9\x7f\x5f\x97\x22\xbc\x4c\x43\x6e\x6a\x09\xf1\x06\x51\xf9\x17\x51\x37\x4c\x41\xd6\x35\x56\x85\x88\x07\x23\xb8\x30\x8b\xf5\x10\x3d\x96\x66\x1e\x63\x0e\x53\x7f\x25\x20\xc7\x28\x03\x1b\x95\xa8\xd2\x0b\xa7\x91\xcf\xf8\xdd\xc4\xc9\x3c\x95\xd1\x2d\x6a\x74\xd8\x6f\xd9\x9f\x09\x75\xce\x54\x91\x1e\x75\x14\x39\x2b\xa5\x5b\x69\xc7\x1d\xce\x26\xc1\xc7\x08\x06\xbe\xfe\xb9\x9e\xcc\xb3\x2c\x4b\x39\x2b\x82\x9c\x60\x6d\x04\xc4\xf7\x51\x47\xad\xd6\x0d\xbe\x1e\x3c\xa9\xca\x7f\x6d\x4b\x63\x41\x91\x23\x2b\xab\x15\xb6\x1a\x42\x17\x97\x9d\xa4\x79\x1c\x04\x42\xa0\xda\x61\xf6\x39\x63\xc3\xaf\xe1\xf2\xfa\xa4\x8c\xe1\x66\xe8\x52\xed\xa2\x29\xe5\x06\x45\x37\xd8\x23\xb8\x4a\xdb\xa6\xb6\xd5\x63\xab\x80\x12\x59\xbc\x3a\x6c\xfc\x7a\x21\x37\x61\x13\x66\xdf\x50\x16\x9e\x2d\xcf\x68\xad\x84\x4e\xd1\x95\xb3\x29\x75\xa6\xdf\x28\xda\x4b\xde\x07\x95\xa7\x40\x5b\x35\xfb\x51\x95\xd2\x36\x4f\x52\x8b\x88\x7e\x1e\xa5\xfe\x15\xd0\x3b\xd1\xc6\x39\x1d\xc4\x4b\xe3\x7a\xde\x9d\x0c\x42\xa5\x29\x3a\x95\x6a\x7f\x02\xba\x4c\x87\x71\x78\x37\x5f\xa2\x97\x8f\x78\x68\xdb\x1c\xe2\xfc\x69\x95\xc3\x5e\x9e\x23\x88\x34\x57\xff\xde\xdc\xd0\xf8\xfd\x0e\x00\x00\xff\xff\x2e\xbf\x5c\x0f\xaf\x06\x00\x00")

func storeStoreGoBytes() ([]byte, error) {
	return bindataRead(
		_storeStoreGo,
		"store/store.go",
	)
}

func storeStoreGo() (*asset, error) {
	bytes, err := storeStoreGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "store/store.go", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1550484718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"store/dataitem.go": storeDataitemGo,
	"store/store.go":    storeStoreGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"store": &bintree{nil, map[string]*bintree{
		"dataitem.go": &bintree{storeDataitemGo, map[string]*bintree{}},
		"store.go":    &bintree{storeStoreGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
